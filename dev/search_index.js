var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = KFUPMCourseDB","category":"page"},{"location":"#KFUPMCourseDB","page":"Home","title":"KFUPMCourseDB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KFUPMCourseDB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [KFUPMCourseDB]","category":"page"},{"location":"#KFUPMCourseDB.Course","page":"Home","title":"KFUPMCourseDB.Course","text":"Course\n\nA structure representing a course, with multiple constructors for creating Course objects in various formats.\n\nFields\n\nid::Union{String, Int}: A unique identifier for the course, which can either be a string (default is \"new\") or an integer (after the course is created in the database).\nterm::String: The academic term in which the course is offered, represented as a string (e.g., \"241\").\ncode::String: The course code (e.g., \"MATH371\") with spaces removed and converted to uppercase.\nname::String: The full name of the course (e.g., \"Introduction to Numerical Computing\").\nsection::String: The section number of the course, represented as a string.\nstudents::Vector{Student}: A list (vector) of students enrolled in the course.\n\nConstructors\n\nCourse(term::String, code::String, name::String, section::String): Creates a new Course with the term, code, name, and section as strings, initializing id to \"new\" and students to an empty array.\nCourse(term::Integer, code::String, name::String, section::Integer): Creates a new Course with an integer term and section, with the code converted to uppercase and spaces removed.\nCourse(term::Integer, code::String, name::String, section::String): Creates a new Course with an integer term, string section, and processes the course code similarly.\nCourse(term::String, code::String, name::String, section::Integer): Creates a Course with a string term and an integer section.\nCourse(c::Course, id::Int): Creates a new Course with an updated ID while retaining all other attributes of the existing Course object.\nCourse(c::Course, students::Vector{Student}): Creates a new Course by updating the list of students, while keeping all other course information the same.\n\nExample\n\n```julia course = Course(241, \"MATH 371\", \"Introduction to Numerical Computing\", 1) println(course.code)  # Prints \"MATH371\" println(course.id)    # Prints \"new\"\n\n\n\n\n\n","category":"type"},{"location":"#KFUPMCourseDB.FileData","page":"Home","title":"KFUPMCourseDB.FileData","text":"FileData(path::String, fields::Dict{String, String}, data::DataFrame)\n\nA structure representing data loaded from a file, along with metadata about its fields.\n\nFields\n\npath::String: The file path from which the data was read.\nfields::Dict{String, String}: A dictionary mapping column names to their data types. The keys are the column names (as strings), and the values are either \"number\" or \"string\", indicating the type of data in each column.\ndata::DataFrame: The actual data loaded from the file, stored as a DataFrame.\n\nExample\n\n```julia filedata = FileData(\"students.csv\", Dict(\"id\" => \"number\", \"name\" => \"string\"), DataFrame()) println(filedata.path)    # Prints the file path println(filedata.fields)  # Prints the fields dictionary println(filedata.data)    # Prints the DataFrame\n\n\n\n\n\n","category":"type"},{"location":"#KFUPMCourseDB.Grade","page":"Home","title":"KFUPMCourseDB.Grade","text":"Grade\n\nA structure representing the grade of a student in a specific course.\n\nFields\n\nstudent_id::Int: The unique identifier of the student to whom the grade belongs.\ncourse_id::Int: The unique identifier of the course in which the student is enrolled.\nname::String: The name of the assessment or assignment for which the grade is awarded.\nvalue::Float64: The actual grade value received by the student.\nmax_value::Float64: The maximum possible grade value for the assessment.\n\nExample\n\n```julia grade = Grade(12345, 1, \"Midterm Exam\", 85.5, 100.0) println(grade.student_id)   # Prints the student ID println(grade.value)        # Prints the grade value\n\n\n\n\n\n","category":"type"},{"location":"#KFUPMCourseDB.Student","page":"Home","title":"KFUPMCourseDB.Student","text":"Student(id::Int, name::String, email::String)\n\nA structure representing a student with their basic details.\n\nFields\n\nid::Int: The student's unique identifier, typically a numeric value.\nname::String: The student's full name.\nemail::String: The student's email address.\n\nExample\n\n```julia student = Student(12345, \"John Doe\", \"johndoe@example.com\") println(student.id)    # Prints the student ID println(student.name)  # Prints the student name println(student.email) # Prints the student email\n\n\n\n\n\n","category":"type"},{"location":"#Base.names-Tuple{Course}","page":"Home","title":"Base.names","text":"names(c::Course)::Vector{String}\n\nRetrieves the names of students enrolled in a given Course.\n\nArguments\n\nc::Course: A Course object containing student data.\n\nReturns\n\nA Vector{String} of student names. If the course has no students, returns an empty array.\n\nExample\n\n```julia course = createCourse(241, \"MATH 371\", \"Introduction to Numerical Computing\", 1) studentnames = names(course) println(studentnames)  # Prints a vector of student names\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.addGrades-Tuple{Course, String, Vararg{Any}}","page":"Home","title":"KFUPMCourseDB.addGrades","text":"addGrades(c::Course, file_path::String, args...;\n    fields::Union{Dict{Symbol, String}, Dict{Symbol, Any}}=Dict(:sid => \"sid\", :name => \"name\", :value => \"value\", :max_value => \"max_value\"), kwargs...)\n\nAdds student grades to a Course object by reading grade data from a file and creating Grade objects.\n\nArguments\n\nc::Course: The Course object to which grades will be added.\nfile_path::String: The path to the file containing grade data. Supported file types are csv, txt, and xlsx.\nargs...: Additional positional arguments passed to the file reading function (readdata).\nfields::Union{Dict{Symbol, String}, Dict{Symbol, Any}}: A dictionary mapping the grade data fields (student ID, name, value, max value) to their corresponding column names in the file. Default mapping is :sid => \"sid\", :name => \"name\", :value => \"value\", and :max_value => \"max_value\". Each field can also be a tuple where the first value is the column name, and the second value is a transformation function.\nkwargs...: Additional keyword arguments passed to the file reading function.\n\nReturns\n\nA Course object with the added grades.\n\nWorkflow\n\nReads the grade data from the specified file using readdata.\nExtracts student IDs, names, grade values, and maximum possible values based on the provided or default fields mapping.\nCreates Grade objects for each student in the course.\nFilters out any grades that do not match the existing student IDs in the course.\nAdds the valid grades to the course using the add_student_grades function.\nIf some grades cannot be matched to students, a warning is issued.\n\nExample\n\n```julia course = createCourse(241, \"MATH 371\", \"Introduction to Numerical Computing\", 1) updatedcourse = addGrades(course, \"grades.csv\", delim=',', header=true) println(updatedcourse.students)  # Prints the course with students and their grades\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.addStudents-Tuple{Course, String, Vararg{Any}}","page":"Home","title":"KFUPMCourseDB.addStudents","text":"addStudents(c::Course, file_path::String, args...; fields::Union{Dict{Symbol, String}, Dict{Symbol, Any}}=Dict(:id => \"id\", :name => \"name\", :email => \"email\"), kwargs...)\n\nAdds students to a Course object by reading data from a file and creating Student objects based on the file content.\n\nArguments\n\nc::Course: The Course object to which students will be added.\nfile_path::String: The path to the file containing student data. Supported file types are csv, txt, and xlsx.\nargs...: Additional positional arguments passed to the file reading function (readdata).\nfields::Union{Dict{Symbol, String}, Dict{Symbol, Any}}: A dictionary mapping the student data fields (ID, name, and email) to their corresponding column names in the file. By default, it assumes :id => \"id\", :name => \"name\", and :email => \"email\". If any field is a tuple, the first value is the column name, and the second value is a transformation function.\nkwargs...: Additional keyword arguments passed to the file reading function.\n\nReturns\n\nA new Course object containing the students loaded from the file, with student data saved to the database.\n\nWorkflow\n\nReads the student data from the specified file using the readdata function.\nExtracts student IDs, names, and emails based on the provided or default fields mapping.\nConverts the extracted data to create Student objects.\nAssociates the students with the provided course and saves the student data to the database.\n\nExample\n\n```julia course = Course(\"241\", \"MATH 371\", \"Introduction to Numerical Computing\", 1) updatedcourse = addStudents(course, \"students.csv\", delim=',', header=true) println(updatedcourse.students)  # Prints the list of added students\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.createCourse-Tuple{Union{Integer, String}, String, String, Union{Integer, String}}","page":"Home","title":"KFUPMCourseDB.createCourse","text":"createCourse(term::Union{Integer, String}, code::String, name::String, section::Union{Integer, String})::Course\n\nCreates a Course object and populates it with students by fetching data from a database.\n\nArguments\n\nterm::Union{Integer, String}: The term in which the course is offered. This can be an integer (e.g., 241) or a string (e.g., \"241\").\ncode::String: The course code (e.g., \"MATH 371\").\nname::String: The name of the course (e.g., \"Introduction to Numerical Computing\").\nsection::Union{Integer, String}: The section number of the course, either as an integer or string.\n\nReturns\n\nA Course object that contains:\ncourse_with_id: The course details (term, code, name, section) with an assigned unique ID from the database.\nstudents: A list or collection of students enrolled in the course, fetched from the database.\n\nExample\n\n```julia course = createCourse(\"241\", \"MATH 371\", \"Introduction to Numerical Computing\", 1) println(course.students)  # Prints the list of students enrolled\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.emails-Tuple{Course}","page":"Home","title":"KFUPMCourseDB.emails","text":"emails(c::Course)::Vector{String}\n\nRetrieves the email addresses of students enrolled in a given Course.\n\nArguments\n\nc::Course: A Course object containing student data.\n\nReturns\n\nA Vector{String} of student email addresses. If the course has no students, returns an empty array.\n\nExample\n\n```julia course = createCourse(241, \"MATH 371\", \"Introduction to Numerical Computing\", 1) studentemails = emails(course) println(studentemails)  # Prints a vector of student email addresses\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.getGrades-Tuple{Course}","page":"Home","title":"KFUPMCourseDB.getGrades","text":"getGrades(c::Course)::Union{Nothing, Vector{Grade}}\n\nRetrieves the grades of students enrolled in a given Course.\n\nArguments\n\nc::Course: A Course object for which to retrieve the grades.\n\nReturns\n\nA Vector{Grade} containing the grades of the students if the course has an existing ID.\nIf the course is marked as \"new\" (i.e., c.id == \"new\"), returns nothing because no grades are associated with a new course.\n\nExample\n\n```julia course = createCourse(241, \"MATH 371\", \"Introduction to Numerical Computing\", 1) grades = getGrades(course) if grades !== nothing     println(grades)  # Prints the grades of the students else     println(\"No grades available for a new course.\") end\n\n\n\n\n\n","category":"method"},{"location":"#KFUPMCourseDB.readdata-Tuple{String, Vararg{Any}}","page":"Home","title":"KFUPMCourseDB.readdata","text":"readdata(filepath::String, args...; kwargs...)::FileData\n\nReads data from a file and returns a FileData object, which includes the file path, a dictionary of field types, and the data as a DataFrame. \n\nArguments\n\nfilepath::String: The path to the file to be read. Supported file formats are .csv, .txt, and .xlsx.\nargs...: Positional arguments passed to the file reading functions (XLSX.readtable for .xlsx files).\nkwargs...: Keyword arguments passed to the file reading functions (CSV.File for .csv and .txt files, XLSX.readtable for .xlsx).\n\nReturns\n\nA FileData object containing:\nfilepath: The path of the file.\nfields: A dictionary where the keys are the column names and the values indicate the data type (\"number\" for numeric fields and \"string\" for other types).\ndata: The content of the file as a DataFrame.\n\nErrors\n\nThrows an AssertionError if the file does not exist or if the file extension is not supported (csv, txt, xlsx).\n\nExample\n\n```julia filedata = readdata(\"data.csv\", delim=',', header=true) println(filedata.fields)  # Dict with column names and their types println(file_data.data)    # DataFrame with the file content\n\n\n\n\n\n","category":"method"}]
}
